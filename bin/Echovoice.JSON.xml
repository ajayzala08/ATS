<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Echovoice.JSON</name>
    </assembly>
    <members>
        <member name="M:Echovoice.JSON.Extensions.Slice(System.String,System.Int32,System.Int32)">
            Credit http://www.dotnetperls.com/string-slice
            <summary>
            Get the string slice between the two indexes.
            Inclusive for start index, exclusive for end index.
            </summary>
        </member>
        <member name="M:Echovoice.JSON.JSONEncoders.EncodeJsObjectArray(System.String[])">
            <summary>
            Same as EncodeJsStringArray except it will not encode elements, useful when elements have already been encoded
            </summary>
            <param name="s">Array of strings already encoded</param>
            <returns>String in JSON format</returns>
        </member>
        <member name="M:Echovoice.JSON.JSONEncoders.EncodeJsObjectList``1(System.Collections.Generic.List{``0})">
            <summary>
            Converts a List of Objects to a JSON encoded Array, objects MUST support toString(), no validation is done
            </summary>
            <param name="s">List of objects to be encoded into a JSON array</param>
            <returns>String in JSON Array format</returns>
        </member>
        <member name="M:Echovoice.JSON.JSONEncoders.EncodeJsObjectArray(System.Object[])">
            <summary>
            Converts an Array of Objects to a JSON encoded Array, objects MUST support toString(), no validation is done
            </summary>
            <param name="s">Array of objects to be encoded into a JSON array</param>
            <returns>String in JSON Array format</returns>
        </member>
        <member name="M:Echovoice.JSON.JSONEncoders.EncodeJsString(System.String)">
            Credit http://www.west-wind.com/weblog/posts/2007/Jul/14/Embedding-JavaScript-Strings-from-an-ASPNET-Page
            
            Edited to add reverse solidus
            
            <summary>
            Encodes a string to be represented as a string literal. The format
            is essentially a JSON string.
            
            The string returned includes outer quotes 
            Example Output: "Hello \"Mike\"!\r\nYou're the best coder in the world"
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
    </members>
</doc>
